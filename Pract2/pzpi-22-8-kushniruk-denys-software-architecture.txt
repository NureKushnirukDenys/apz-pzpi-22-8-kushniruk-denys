Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії





Практична робота № 2
з дисципліни «Архітектура програмного забезечення»








Виконав:									Перевірив:
ст. гр. ПЗПІ-22-8								ст. викладач.
Кушнірук Денис 								Сокорчук І.П









Харків 2025

1 ІСТОРІЯ ЗМІН

Табл. 1 – Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	08.04.2025	0.1	

2 ЗАВДАННЯ

Метою даної практичної роботи було дослідження та аналіз архітектури програмної системи Netflix. В рамках роботи необхідно було дослідити технологічний стек системи, проаналізувати архітектурні рішення та підходи до масштабування, а також розглянути особливості системи стримінгу відео та механізми рекомендаційного алгоритму.
Для виконання завдання потрібно було зібрати інформацію з різних джерел, включаючи офіційний блог Netflix, технічні статті від розробників компанії, публічні виступи технічних лідерів та загальнодоступні матеріали про архітектуру системи. На основі цієї інформації необхідно було підготувати презентацію, що наочно демонструє архітектуру Netflix, її компоненти та взаємозв'язки між ними.
Завдання вимагало розуміння принципів архітектури програмного забезпечення, мікросервісного підходу, механізмів масштабування та застосування технологій для оптимізації рекомендацій і користувацького досвіду в системах стримінгу.

3 ОПИС ВИКОНАНОЇ РОБОТИ

У рамках практичної роботи було досліджено архітектуру програмної системи Netflix — провідного сервісу стримінгу відео. Дослідження охоплювало аспекти розвитку системи та технічні деталі.
Netflix — це глобальна платформа для стримінгу відео, яка має понад 200 мільйонів користувачів. Спочатку заснована як компанія з оренди DVD по пошті, у 2007 році вона перейшла до моделі стримінгу. З 2010 року Netflix почав використовувати мікросервісну архітектуру, розподіливши систему на менші сервіси для кращої масштабованості. У 2020-2023 роках компанія активно впроваджувала машинне навчання для рекомендацій.
Технологічний стек Netflix включає Java та Python для бекенду, Apache Kafka для обробки потокових даних, RESTful API та GraphQL для інтеграції з клієнтами. Клієнтська частина використовує React.js для веб-інтерфейсу та React Native для мобільних додатків. Інфраструктура розгорнута на AWS, з використанням Kubernetes та Docker.
Архітектура Netflix базується на мікросервісах, що включають сервіси для управління користувачами, рекомендацій, обробки відео та аналітики. Система рекомендацій використовує алгоритми машинного навчання для персоналізації контенту.
Для масштабування Netflix застосовує горизонтальне масштабування, автоматичне масштабування інстансів на AWS та контейнеризацію. Висока доступність забезпечується через багатозональне розгортання, аварійне відновлення та кешування.
Механізми монетизації включають підписки різних рівнів та корпоративні пакети, що інтегровані в загальну архітектуру системи. Технічні виклики, зокрема, масштабування та персоналізація, були вирішені через хмарну інфраструктуру та розвиток алгоритмів машинного навчання.

4	ВИСНОВКИ

У процесі виконання практичної роботи було досліджено архітектуру програмної системи Netflix — одного з найбільших сервісів стримінгу відео. Аналіз показав, що Netflix використовує сучасну мікросервісну архітектуру, побудовану на хмарних технологіях, з високим рівнем масштабованості та доступності.
 
ДОДАТОК А

Відеозапис доповіді на YouTube: https://youtu.be/-ZkK9xI1WAE
0:00 - Вступ 
0:50 - Архітектурні виклики та задачі 
1:45 - Компонентна архутектура Netflix 
2:38 - Composite-патерн у Netflix 
3:25 - Back-end архітектура Netflix 
4:13 - Використання CDN у Netflix - Open Connect 
4:52 - Схема архітектури 
6:00 - Комунікаці між сервісами 
6:33 - Обробка даних та персоналізація 
7:06 - Безпека 
7:41 - Висновики 
8:22 - Використані джерела
 
ДОДАТОК Б

 
Рисунок Б. 1 – Титульний слайд

 
Рисунок Б. 2 – Вступ


 
Рисунок Б. 3 – Архітектурні виклики та задачі

 
Рисунок Б. 4 – Компонентна архітектура

 
Рисунок Б. 5 – Composite-патерн у Netflix

 
Рисунок Б. 6 – Back-end архітектура Netflix

 
Рисунок Б. 7 – Використання CDN у Netflix — Open Connect

 
Рисунок Б. 8 – Схема архітектури
 
Рисунок Б. 9 – Комунікація між сервісами

 
Рисунок Б. 10 – Обробка даних та персоналізація

 
Рисунок Б. 11 – Безпека системи

 
Рисунок Б. 12 – Висновки
 
Рисунок Б. 13 – Використані джерела



 
ДОДАТОК В

1. // Leaf-компонент — окрема картка тайтлу (фільму або серіалу)
2. const TitleCard = ({ title }: { title: string }) => (
3.   <div className="title-card">{title}</div>
4. );
5. 
6. // Composite-компонент — ряд з категорією (наприклад, Trending Now)
7. const Row = ({ label, titles }: { label: string; titles: string[] }) => (
8.   <section className="row">
9.     <h3>{label}</h3>
10.     <div className="title-list">
11.       {titles.map((title) => (
12.         <TitleCard key={title} title={title} />
13.       ))}
14.     </div>
15.   </section>
16. );
