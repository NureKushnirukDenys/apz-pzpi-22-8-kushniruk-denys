Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії





Лабораторна робота № 2
з дисципліни «Архітектура програмного забезпечення» 
на тему «Розширення серверної частини програмної системи»








Виконав:									Перевірив:
ст. гр. ПЗПІ-22-8								ст. викладач. 
Кушнірук Денис 								Сокорчук І.П









Харків 2025

1 ІСТОРІЯ ЗМІН

У цьому розділі представлено історію внесених змін до звіту, що наведено у табл. 1.

Таблиця 1 – Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	12.05.2025	0.1	Формування результатів та висновків
2	12.05.2025	0.1	Опис виконаної роботи
3	12.05.2025	0.1	Формування додатків

 
2 ЗАВДАННЯ


2.1 Мета роботи: 
Розширення серверної частини існуючої програмної системи «SLC System»

2.2 Аналіз завдання:
Необхідно проаналізувати існуючі компоненти системи, а також запропонувати та реалізувати розширення функціональності серверної частини. 
Розширення серверної частини полягає у впровадженні інтернаціоналізації (i18n) для доступу програмної системи українською та англійською мовами. 

2.3 Хід роботи
Розширення серверної частини, а також реалізація розширення функціональності серверної частини.

 
3 ОПИС ВИКОНАНОЇ РОБОТИ

У цьому розділі представлено аналіз існуючих компонентів серверної частини системи SLC System та запропоновано шляхи її розширення. Графічні матеріали (діаграми) наведено у дод. Б
Система SLC System реалізована на основі багаторівневої архітектури, яка забезпечує чітке розділення відповідальності між компонентами. Архітектура системи складається з наступних основних рівнів:
− рівень представлення - клієнтські додатки (веб-інтерфейс, мобільний додаток); 
− рівень API – NodeJS та Mongoose, що забезпечує взаємодію між клієнтами та сервером; 
− рівень бізнес-логіки - сервіси, що реалізують основні алгоритми та правила системи; 
− рівень зберігання даних - MongoDB.

3.1 Компоненти серверної частини
Система реалізує RESTful API на базі NodeJS, що забезпечує взаємодію з клієнтськими додатками. Основні контролери:
	Auth – автентифікація;
	Users – керування користувачами системи;
	Logs - керування логами системи;
	Rooms - керування кімнатами;
	Lights - керування освітленням кімнатами;

Основні моделі бази даних включають:
	Users – інформація про користувачів системи;
	Logs - інформація про логи системи;
	Rooms - інформація про кімнатами; 
	Lights - інформація про освітленням кімнати;

Як база даних використовується MongoDB яка містить взаємопов'язані таблиці для зберігання інформації про користувачів, кінмати приміщення, інформацію про освітлення та логи системи. ER-модель бази даних показана на рис. Б.3 у дод. Б.

3.2 Бізнес-логіка системи
Бізнес-логіка системи SLC System полягає в зменшенні споживання електроенергії шляхом автоматичного керування освітленням. Система вмикає або вимикає світло залежно від умов у приміщенні, а також веде облік витраченої енергії.

3.3 Розширення серверної частини
3.3.1 Розширення бізнес-логіки
Серверна частина системи SLC System була доповнена функцією обчислення економії електроенергії. Система порівнює фактичне споживання з максимально можливим і показує, скільки вдалося зекономити. 

Економія (%)=(P_max- P_avg)/P_max *100%
де: 
	P_max — максимальне можливе споживання (Вт), якщо світло працює безперервно.
	P_avg— фактичне середнє споживання системи протягом дня (Вт).

Таким чином, система дозволяє контролювати енергоспоживання та порівнювати ефективність роботи.

3.3.2 Впровадження інтернаціоналізації
Для підтримки української та англійської мов пропонується реалізувати інтернаціоналізацію (i18n). Для реалізації даного функціоналу буде використана бібліотека next-intl. 

4 ВИСНОВКИ 

В результаті виконання лабораторної роботи було розширено серверну частину програмної системи SLC System. Додано підтримку функціоналу моніторингу та розрахунку енергоспоживання. Реалізовано бізнес-логіку оцінки ефективності автоматичного керування освітленням, що включає обчислення рівня економії електроенергії.
Розширення системи SLC System підвищує її цінність як інструменту енергоефективного керування освітленням, сприяє зниженню витрат на електроенергію та покращенню екологічної відповідальності користувачів.

 
ДОДАТОК А
Відеозапис

Відеозапис презентації результатів лабораторної роботи:  https://youtu.be/RTmPi9zhHWo 
Хронологічний опис відеозапису:
00:00 - Вступ 
00:18 - Математика серверної частини 
00:41 - Інтернаціоналізація 
00:50 - Перевірка математики серверної частини 
01:21 - Код розрахунку значення 
01:48 - Файли різних мов 
02:10 - Бекап даних




 
ДОДАТОК Б
Графічні матеріали

 
Рисунок Б.1 – UML діаграма розгортання

 
Рисунок Б.2 – Структура бази даних


 
Рисунок Б.3 – UML діаграма прецедентів


 
Рисунок Б.4 – UML діаграма діяльності для серверної частини

 
Рисунок Б.5 – Приклад вмісту файлу локалізації для англійської мови

 
Рисунок Б.6 – Приклад вмісту файлу локалізації для української мови

 
Рисунок Б.3 – ER-модель даних

 
ДОДАТОК В 
Програмний код

В.1 Математична обробка прикладних даних
GitHub репозиторій: https://github.com/NureKushnirukDenys/apz-pzpi-22-8-kushniruk-denys/blob/main/Lab2/pzpi-22-8-kushniruk-denys-lab2/businessLogic/BusinessLogic.js 
1. /**
2.  * Дано:
3.  * - brightness (0-100) — рівень яскравості лампи у відсотках, зберігається у полі brightness моделі Light.
4.  * - Всі лампи — люмінесцентні, потужність визначається дискретно:
5.  *   0–24%: 0 Вт (вимкнено)
6.  *   25–49%: 9 Вт (450 лм)
7.  *   50–74%: 14 Вт (700 лм)
8.  *   75–99%: 19 Вт (900 лм)
9.  *   100%: 29 Вт (1300 лм)
10.  * - Для розрахунку економії потрібен масив об'єктів Light за певний період (наприклад, за день/тиждень).
11.  *
12.  * Формула:
13.  *   економія(%) = ((Pmax - Pavg) / Pmax) * 100%
14.  *   Pmax — максимальна потужність (всі лампи на 100%)
15.  *   Pavg — середня потужність за період (з урахуванням brightness)
16.  */
17. 
18. /**
19.  * Розрахунок потужності лампи за яскравістю (brightness 0-100)
20.  * @param {number} brightness - Яскравість (0-100)
21.  * @returns {number} Потужність у Вт
22.  */
23. function getPowerByBrightness(brightness) {
24.   if (brightness === 0) return 0;
25.   if (brightness >= 1 && brightness <= 24) return 0;
26.   if (brightness >= 25 && brightness <= 34) return 9;
27.   if (brightness >= 35 && brightness <= 49) return 12;
28.   if (brightness >= 50 && brightness <= 54) return 14;
29.   if (brightness >= 55 && brightness <= 74) return 17;
30.   if (brightness >= 75 && brightness <= 84) return 19;
31.   if (brightness >= 85 && brightness <= 99) return 24;
32.   if (brightness === 100) return 29;
33.   return 0;
34. }
35. 
36. /**
37.  * Розрахунок економії електроенергії
38.  * @param {Array} lights - Масив об'єктів освітлення за період [{brightness: Number, ...}]
39.  * @returns {number} Відсоток економії
40.  */
41. function calculateEnergySaving(lights) {
42.   if (!lights.length) return 0;
43. 
44.   const Pmax = lights.length * 29;
45.   const totalPower = lights.reduce(
46.     (sum, light) => sum + getPowerByBrightness(light.brightness),
47.     0
48.   );
49.   const Pavg = totalPower / lights.length;
50.   const saving = ((Pmax - Pavg) / Pmax) * 100;
51.   return Math.round(saving * 100) / 100;
52. }
53. 
54. module.exports = { calculateEnergySaving };
55.

В.2 Локалізація тексту
GitHub репозиторій: https://github.com/NureKushnirukDenys/apz-pzpi-22-8-kushniruk-denys/tree/main/Lab2/pzpi-22-8-kushniruk-denys-lab2/messages 
1. import createMiddleware from 'next-intl/middleware';
2. 
3. export default createMiddleware({
4.   locales: ['en', 'uk'],
5.   defaultLocale: 'uk'
6. });
7. 
8. export const config = {
9.   matcher: ['/((?!_next|favicon.ico).*)']
10. };
11. 
12. import {useTranslations} from 'next-intl';
13. 
14. export default function HomePage() {
15.   const t = useTranslations();
16. 
17.   return (
18.     <main>
19.       <h1>{t('title')}</h1>
20.       <p>{t('description')}</p>
21.       <div>{t('energySaved')}: 83%</div>
22.     </main>
23.   );
24. }
25. 
26. {
27.   "title": "Система Розумного Освітлення",
28.   "description": "Автоматичне керування освітленням для економії енергії та підвищення комфорту.",
29.   "energySaved": "Зекономлено енергії",
30.   "language": "Мова"
31. }
32. 
33. {
34.   "title": "Smart Lighting Control System",
35.   "description": "Automatically manage lighting to save energy and increase comfort.",
36.   "energySaved": "Energy saved",
37.   "language": "Language"
38. }
39.

В.3 Адміністрування бізнес-логіки системи
GitHub репозиторій: https://github.com/NureKushnirukDenys/apz-pzpi-22-8-kushniruk-denys/blob/main/Lab2/pzpi-22-8-kushniruk-denys-lab2/routes/light/lightRoutes.js 

1. /**
2.  * @swagger
3.  * /lights/saving/{roomId}:
4.  *   get:
5.  *     summary: Розрахунок економії електроенергії для кімнати
6.  *     description: Повертає відсоток економії електроенергії для всіх ламп у кімнаті.
7.  *     tags: [Lights]
8.  *     parameters:
9.  *       - in: path
10.  *         name: roomId
11.  *         required: true
12.  *         schema:
13.  *           type: string
14.  *         description: ID кімнати
15.  *     responses:
16.  *       200:
17.  *         description: Відсоток економії електроенергії успішно розраховано.
18.  *         content:
19.  *           application/json:
20.  *             schema:
21.  *               type: object
22.  *               properties:
23.  *                 savingPercent:
24.  *                   type: number
25.  *                   description: Відсоток економії
26.  *       500:
27.  *         description: Помилка розрахунку економії.
28.  */
29. router.get("/saving/:roomId", async (req, res) => {
30.   try {
31.     const lights = await Light.find({ roomId: req.params.roomId });
32.     const saving = calculateEnergySaving(lights);
33.     res.json({ savingPercent: saving });
34.   } catch (error) {
35.     res.status(500).json({ message: "Помилка розрахунку економії" });
36.   }
37. });
38.

В.4 Резервне копіювання користувацьких даних
GitHub репозиторій: https://github.com/NureKushnirukDenys/apz-pzpi-22-8-kushniruk-denys/blob/main/Lab2/pzpi-22-8-kushniruk-denys-lab2/backup.js 

1. const mongoose = require("mongoose");
2. const fs = require("fs");
3. require("dotenv").config();
4. 
5. const uri = process.env.CONNECT_URL_MONGODB;
6. 
7. async function backupCollection(modelName, fileName) {
8.   const Model = mongoose.model(
9.     modelName,
10.     new mongoose.Schema({}, { strict: false })
11.   );
12.   const data = await Model.find({});
13.   fs.writeFileSync(fileName, JSON.stringify(data, null, 2), "utf-8");
14.   console.log(`Колекція ${modelName} збережена у ${fileName}`);
15. }
16. 
17. async function main() {
18.   await mongoose.connect(uri);
19. 
20.   await backupCollection("Light", "./backup/light.json");
21.   await backupCollection("Room", "./backup/room.json");
22.   await backupCollection("User", "./backup/user.json");
23.   await backupCollection("Log", "./backup/log.json");
24. 
25.   await mongoose.disconnect();
26. }
27. 
28. main();
29.  
ДОДАТОК Г
Специфікація розробленого REST API

Таблиця Г.1 – Маршрут /auth/register

Auth
API відповідає за обробку автентифікації користувачів
POST /auth/register
Регістрація користувача
	Опис: Створення нового користувача в системі.
	Параметри:
	email (string): Адреса електронної пошти користувача.
	password (string): Пароль користувача.
	firstName (string): Ім'я користувача.
	lastName (string): Прізвище користувача.
	profileImage (string): URL зображення профілю користувача.
	Відповідь:
	200: Користувача успішно зареєстровано.
POST /auth/login
Авторизація користувача
	Опис: Авторизація користувача в системі.
	Параметри:
	email (string): Адреса електронної пошти користувача.
	password (string): Пароль користувача.
	Відповідь:
	200: Користувач успішно авторизований.
POST /auth/logout
Вихід з аккаунту
	Опис: Завершення сесії користувача.
	Відповідь:
	200: Користувач успішно вийшов.

Lights
API відповідає за обробку освітлення
GET /lights/{id}
Отримати дані про освітлення
	Опис: Отримати інформацію про освітлення за його ID.
	Параметри:
	id (string): ID освітлення.
	Відповідь:
	200: Дані про освітлення успішно отримано.
	404: Освітлення не знайдено.
PUT /lights/{id}/toggle
Перемикати стан освітлення
	Опис: Змінює стан освітлення на протилежний.
	Параметри:
	id (string): ID освітлення.
	Відповідь:
	200: Стан освітлення успішно змінено.
	404: Освітлення не знайдено.
PUT /lights/{id}/schedule
Встановити розклад для освітлення
	Опис: Встановлює час початку та закінчення для автоматичного включення/вимкнення освітлення.
	Параметри:
	id (string): ID освітлення.
	Параметри:
	start (string, date-time): Час початку.
	end (string, date-time): Час завершення.
	Відповідь:
	200: Розклад для освітлення успішно оновлено.
	404: Освітлення не знайдено.
PUT /lights/{id}/motion
Виявлення руху для автоматичного включення
	Опис: Вмикає освітлення автоматично, якщо виявлений рух.
	Параметри:
	id (string): ID освітлення.
	Відповідь:
	200: Освітлення автоматично увімкнено.
	404: Освітлення не знайдено.

Rooms
API відповідає за роботу з кімнатами
POST /rooms/create
Створити нову кімнату
	Опис: Створення нової кімнати в системі.
	Параметри:
	user_id (string): Ідентифікатор користувача.
	name (string): Назва кімнати.
	Відповідь:
	200: Кімната успішно створена.
GET /rooms/info/{roomId}
Отримати інформацію про кімнату
	Опис: Отримання інформації про кімнату за її ID.
	Параметри:
	roomId (string): ID кімнати.
	Відповідь:
	200: Інформація про кімнату успішно отримана.
	404: Кімната не знайдена.
PUT /rooms/update/{roomId}
Оновити інформацію про кімнату
	Опис: Оновлення даних кімнати.
	Параметри:
	roomId (string): ID кімнати.
	Параметри:
	user_id (string): Ідентифікатор користувача.
	name (string): Назва кімнати.
	Відповідь:
	200: Кімната успішно оновлена.
	404: Кімната не знайдена.
PATCH /rooms/updateStatus/{roomId}
Оновити статус кімнати
	Опис: Оновлення статусу кімнати (увімкнено/вимкнено світло).
	Параметри:
	roomId (string): ID кімнати.
	Параметри:
	status (boolean): Статус кімнати (увімкнено/вимкнено світло).
	Відповідь:
	200: Статус кімнати успішно оновлено.
	404: Кімната не знайдена.
DELETE /rooms/delete/{roomId}
Видалити кімнату
	Опис: Видалення кімнати з системи.
	Параметри:
	roomId (string): ID кімнати.
	Відповідь:
	200: Кімната успішно видалена.
	404: Кімната не знайдена.

Users
API відповідає за обробку обробку даних користувачів
GET /users/info/{id}
Отримати інформацію про користувача
	Опис: Отримати інформацію про користувача за його ID.
	Параметри:
	id (string): ID користувача.
	Відповідь:
	200: Інформація про користувача успішно отримана.
	404: Користувача не знайдено.
PUT /users/update/{id}
Редагувати дані користувача
	Опис: Редагувати дані користувача за його ID.
	Параметри:
	id (string): ID користувача.
	Параметри:
	email (string):
	firstName (string):
	lastName (string):
	profileImage (string):
	Відповідь:
	200: Дані користувача успішно оновлені.
	404: Користувача не знайдено.

Logs
GET /logs/info
Отримати всі логи
	Опис: Отримання списку всіх логів.
	Відповідь:
	200: Логи успішно отримано.
POST /logs/create
Створити новий лог
	Опис: Додавання нового лога до системи.
	Параметри:
	user_id (string): ID користувача, який здійснив дію. Example: 605c72ef1532071f5f6a2b10
	room_id (string): ID кімнати, в якій відбулася дія. Example: 605c72ef1532071f5f6a2b11
	action (string): Опис дії. Example: Ввімкнув світло
	timestamp (string, date-time): Час виконання дії.
	timeOn (number): Час, коли світло було увімкнено (в секундах).
	timeOff (number): Час, коли світло було вимкнено (в секундах).
	averageLightTime (number): Середній час освітлення кімнати (в секундах).
	Відповідь:
	201: Лог успішно створено.
GET /logs/info/{logId}
Отримати конкретний лог за ID
	Опис: Отримання логу за його ID.
	Параметри:
	logId (string): ID логу.
	Відповідь:
	200: Лог успішно отримано.
	404: Лог не знайдений.
DELETE /logs/delete/{logId}
Видалити лог за ID
	Опис: Видалення конкретного логу за його ID.
	Параметри:
	logId (string): ID логу.
	Відповідь:
	200: Лог успішно видалено.
	404: Лог не знайдений.

