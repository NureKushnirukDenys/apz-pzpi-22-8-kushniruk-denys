Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії





Лабораторна робота № 5
з дисципліни «Архітектура програмного забезпечення» 
на тему «Розгортання програмної системи та демонстрація її роботи»








Виконав:									Перевірив:
ст. гр. ПЗПІ-22-8								ст. викладач. 
Кушнірук Денис 								Сокорчук І.П







Харків 2025


1 ІСТОРІЯ ЗМІН

У цьому розділі представлено історію внесених змін до звіту, що наведено у табл. 1.

Таблиця 1 – Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	29.05.2025	0.1	Створено розділ «Завдання»
2	29.05.2025	0.1	Створено розділ «Опис Виконаної роботи»
3	29.05.2025	0.1	Створено розділ «Висновки»


 
2 ЗАВДАННЯ


2.1 Мета роботи: 
Потрібно розгорнути повноцінний стек програмної системи та продемонструвати її роботу в усіх компонентах: серверній частині, веб-інтерфейсі, мобільному додатку та IoT-підсистемі. Продемонстувати, що всі частини системи працюють узгоджено, забезпечуючи своєчасний збір, зберігання та моніторинг медичних біологічних матеріалів.

 
3 ОПИС ВИКОНАНОЇ РОБОТИ

У межах розробки програмної системи SLC System було реалізовано веб-інтерфейс адміністративної панелі та серверну частину, що взаємодіють між собою через REST API. Основна функціональність охоплює керування користувачами, кімнатами, логами, освітленням та розрахунком економії електроенергії. У роботі було використано сучасні веб-технології, зокрема Next.js, Node.js, MongoDB, Mongoose, REST API та JavaScript.
Next.js
Використовувався для розробки веб-інтерфейсу адміністративної панелі. Завдяки можливостям Next.js реалізовано:
-	маршрутизацію сторінок,
-	мультимовність,
-	серверний рендеринг для покращення продуктивності,
-	адаптивний інтерфейс із використанням Tailwind CSS,
-	інтерактивні компоненти для роботи з формами, таблицями, модальними вікнами.
Node.js + Express
На базі Node.js реалізовано серверну частину (бекенд) системи. За допомогою фреймворку Express створено REST API для обробки запитів від клієнта. Сервер відповідає за:
-	обробку реєстрації та авторизації користувачів,
-	CRUD-операції для кімнат, логів та інших об'єктів,
-	реалізацію бізнес-логіки (розрахунок економії електроенергії),
-	захист маршрутів і валідацію даних.
MongoDB + Mongoose
Для зберігання даних використовується MongoDB — документно-орієнтована NoSQL база даних. За допомогою бібліотеки Mongoose створено схеми даних, які описують:
-	користувачів (з ролями та доступом),
-	кімнати (з параметрами освітлення),
-	історію дій (логи),
-	параметри освітлення (яскравість, стан тощо).
Mongoose також забезпечує валідацію, попередню обробку даних та зручні методи взаємодії з БД.
REST API
Вся взаємодія між клієнтською та серверною частинами відбувається через REST API. Реалізовані ендпоінти для:
-	авторизації та реєстрації користувачів,
-	отримання, створення, оновлення та видалення кімнат,
-	отримання логів та статистики,
-	збереження налаштувань освітлення.
API розроблено відповідно до принципів REST: чітка структура маршрутів, методи GET, POST, PUT, DELETE, використання токенів доступу (JWT).
JavaScript
Мова JavaScript використовувалась як основна мова для розробки клієнтської та серверної частин. У клієнті — для створення інтерфейсу, у сервері — для реалізації бізнес-логіки, роутів, обробки запитів, взаємодії з базою даних.

 
4 ВИСНОВКИ 

У ході розробки проєкту SLC System було реалізовано як веб-інтерфейс адміністративної панелі, так і мобільний клієнт для керування освітленням у приміщеннях. Веб-частина забезпечує адміністраторів повноцінними засобами управління системою: створенням та редагуванням кімнат, керуванням користувачами, переглядом логів дій, моніторингом пристроїв, розрахунком економії електроенергії та веденням статистики. Також реалізовано систему ролей, захищену авторизацію, багатомовність та резервне копіювання даних.
Мобільний додаток розроблений для зручного щоденного користування і надає можливість керування освітленням безпосередньо зі смартфона: вмикання/вимикання світла, регулювання яскравості. Інтерфейс додатку адаптований до мобільних пристроїв, підтримує локалізацію та забезпечує швидкий доступ до основного функціоналу.
Реалізовані рішення дозволяють створити ефективну, гнучку та енергоощадну систему автоматичного керування освітленням, зручною як для кінцевих користувачів, так і для адміністраторів. Проєкт має потенціал для масштабування, розширення функціоналу та інтеграції з іншими розумними системами.
 
Додаток А
Хронологічний опис та посилання

Відеозапис доповіді на YouTube: https://youtu.be/X-pERwkJCyE 
Хронологічний опис доповіді:
00:00 - Вступ 
00:20 - Клонування та встановлення залежностей 
02:00 - Реэстрація (Веб) 
02:49 - Авторизація (Веб) 
02:53 - Головна сторінка / Статистика 
03:15 - Бекап 
03:35 - Керування користувачами 
04:22 - Керування кімнатами 
05:24 - Бізнес логіка 
06:12 - Логи 
06:53 - Реєстрація (мобайл) 
07:49 - Авторизація (мобайл) 
08:01 - Головний екран 
08:24 - Керування освітленням 
08:55 - IoT пристрій 
09:40 - Перевірка роботи пристрою
 
Додаток Б
Специфікація

# SLC System

## Передумови для запуску проєкту

Щоб розгорнути та запустити систему **SLC System**, переконайтеся, що у вас встановлене все необхідне програмне забезпечення для кожної частини проєкту.

---

### Back-end

- **Node.js**  
  Необхідно встановити Node.js (рекомендовано версію 16 або новішу). Node.js використовується для запуску серверної частини та менеджера пакетів npm.

- **MongoDB**  
  Для зберігання даних використовується база даних MongoDB. Ви можете встановити MongoDB локально або скористатися хмарним сервісом (наприклад, MongoDB Atlas).

- **Mongoose**  
  Mongoose — це ODM-бібліотека для MongoDB, яка використовується у проєкті для роботи з базою даних. Встановлюється автоматично через npm при встановленні залежностей.

---

### Front-end

- **Next.js**  
  Для клієнтської частини використовується фреймворк Next.js (рекомендовано версію 13 або новішу). Він забезпечує SSR, маршрутизацію та зручну розробку SPA/PWA.

- **npm**  
  Node Package Manager потрібен для встановлення всіх залежностей front-end частини.

---

### Mobile

- **Android Studio**  
  Для розробки та запуску мобільного застосунку необхідно встановити Android Studio.

- **Android SDK**  
  SDK потрібен для компіляції та емуляції Android-додатків.

- **Kotlin**  
  Мобільний застосунок написаний мовою Kotlin.

- **Емулятор Android** або реальний пристрій  
  Для тестування застосунку використовуйте вбудований емулятор Android Studio або підключіть реальний Android-пристрій.

---

## Коротка інструкція по запуску

### 1. Клонування репозиторію

```sh
git clone <https://github.com/NureKushnirukDenys/apz-pzpi-22-8-kushniruk-denys/tree/main/Lab5>
```

### 2. Запуск Back-end

```sh
cd back-end
npm install
# Створіть файл .env та вкажіть параметри
CONNECT_URL_MONGODB=""
PORT = ""
JWT_SECRET = ""
node app.js
```

### 3. Запуск Front-end

```sh
cd front-end
npm install
npm run dev
```

Front-end буде доступний за адресою [http://localhost:3000](http://localhost:3000)

### 4. Запуск Mobile

1. Відкрийте папку mobile у Android Studio.
2. Дочекайтеся синхронізації Gradle.
3. Запустіть застосунок на емуляторі або реальному пристрої.

---

## Примітки

- Переконайтеся, що бекенд і фронтенд підключені до однієї бази даних.
- Для коректної роботи API переконайтеся, що всі частини проєкту запущені.
- Документація API доступна через Swagger (деталі у відповідному розділі Readme).
- Для зміни мови інтерфейсу використовуйте перемикач мови у front-end.

## API документація SLC System

---

### Реєстрація користувача

**POST** `/auth/register`

**Опис:**  
Реєструє нового користувача в системі.

**Параметри запиту**

**Body:**

- `email` (String, обовʼязково): Адреса електронної пошти користувача.
- `password` (String, обовʼязково): Пароль користувача.
- `firstName` (String, обовʼязково): Імʼя користувача.
- `lastName` (String, обовʼязково): Прізвище користувача.
- `profileImage` (String, опціонально): URL зображення профілю користувача.

**Відповідь**

- **200 OK:**
  ```json
  {
    "message": "Користувача успішно зареєстровано.",
    "token": "<JWT_TOKEN>",
    "user": {
      "id": "...",
      "email": "...",
      "role": "...",
      "firstName": "...",
      "lastName": "...",
      "profileImage": "..."
    }
  }
  ```

### Авторизація користувача

**POST** `/auth/login`

**Опис:**  
Авторизує користувача в системі та повертає JWT токен.

**Параметри запиту**

**Body:**

- `email` (String, обовʼязково): Адреса електронної пошти користувача.
- `password` (String, обовʼязково): Пароль користувача.

**Відповідь**

- **200 OK:**
  ```json
  {
    "message": "Користувач успішно авторизований.",
    "token": "<JWT_TOKEN>",
    "user": {
      "id": "...",
      "email": "...",
      "role": "...",
      "firstName": "...",
      "lastName": "...",
      "profileImage": "..."
    }
  }
  ```

### Створення резервної копії (бекап)

**POST** `/backup`

**Опис:**  
Створює резервну копію бази даних. Доступно лише для авторизованих користувачів.

**Параметри запиту**

**Body:**

- `user_id` (String, обовʼязково): ID користувача, який ініціює бекап.

**Відповідь**

- **200 OK:**
  ```json
  {
    "message": "Бекап виконано успішно",
    "output": "<результат виконання скрипта>"
  }
  ```

### Отримати всі логи

**GET** `/logs/info`

**Опис:**  
Повертає список усіх логів у системі.

**Параметри запиту:**  
Відсутні.

**Відповідь**

- **200 OK:**
  ```json
  [
    {
      "_id": "664f1c...",
      "user_id": {
        "_id": "664f1b...",
        "email": "user@example.com"
      },
      "room_id": {
        "_id": "664f1a...",
        "name": "Кімната 1"
      },
      "action": "Ввімкнув світло",
      "timestamp": "2024-06-01T12:00:00.000Z",
      "timeOn": 3600,
      "timeOff": 1800,
      "averageLightTime": 2700
    }
  ]
  ```

### Створити новий лог

**POST** `/logs/create`

**Опис:**  
Додає новий лог у систему.

**Параметри запиту**

**Body:**

- `user_id` (String, обовʼязково): ID користувача, який здійснив дію.
- `room_id` (String, опціонально): ID кімнати, в якій відбулася дія.
- `action` (String, обовʼязково): Опис дії.
- `timestamp` (String, обовʼязково): Час виконання дії (ISO-формат).
- `timeOn` (Number, опціонально): Час, коли світло було увімкнено (секунди).
- `timeOff` (Number, опціонально): Час, коли світло було вимкнено (секунди).
- `averageLightTime` (Number, опціонально): Середній час освітлення кімнати (секунди).

**Відповідь**

- **201 Created:**
  ```json
  {
    "_id": "664f1c...",
    "user_id": "664f1b...",
    "room_id": "664f1a...",
    "action": "Ввімкнув світло",
    "timestamp": "2024-06-01T12:00:00.000Z",
    "timeOn": 3600,
    "timeOff": 1800,
    "averageLightTime": 2700
  }
  ```

### Отримати лог за ID

**GET** `/logs/info/{logId}`

**Опис:**  
Повертає інформацію про конкретний лог за його ID.

**Параметри запиту**

- `logId` (String, обовʼязково): ID логу.

**Відповідь**

- **200 OK:**
  ```json
  {
    "_id": "664f1c...",
    "user_id": {
      "_id": "664f1b...",
      "email": "user@example.com"
    },
    "room_id": {
      "_id": "664f1a...",
      "name": "Кімната 1"
    },
    "action": "Ввімкнув світло",
    "timestamp": "2024-06-01T12:00:00.000Z",
    "timeOn": 3600,
    "timeOff": 1800,
    "averageLightTime": 2700
  }
  ```

### Видалити лог за ID

**DELETE** `/logs/delete/{logId}`

**Опис:**  
Видаляє конкретний лог за його ID.

**Параметри запиту**

- `logId` (String, обовʼязково): ID логу.

**Відповідь**

- **200 OK:**
  ```json
  {
    "message": "Лог успішно видалено"
  }
  ```

### Отримати інформацію про користувача

**GET** `/users/info/{id}`

**Опис:**  
Повертає інформацію про користувача за його ID.

**Параметри запиту**

- `id` (String, обовʼязково): ID користувача.

**Відповідь**

- **200 OK:**
  ```json
  {
    "_id": "664f1b...",
    "email": "user@example.com",
    "firstName": "Іван",
    "lastName": "Іванов",
    "profileImage": "https://example.com/profile.jpg",
    "role": "user"
  }
  ```

### Оновити дані користувача

**PUT** `/users/update/{id}`

**Опис:**  
Оновлює дані користувача за його ID.

**Параметри запиту**

- `id` (String, обовʼязково): ID користувача.

**Body:**

- `email` (String, опціонально): Нова електронна пошта користувача.
- `firstName` (String, опціонально): Нове імʼя користувача.
- `lastName` (String, опціонально): Нове прізвище користувача.
- `profileImage` (String, опціонально): Новий URL зображення профілю.

**Відповідь**

- **200 OK:**
  ```json
  {
    "_id": "664f1b...",
    "email": "user@example.com",
    "firstName": "Іван",
    "lastName": "Іванов",
    "profileImage": "https://example.com/profile.jpg",
    "role": "user"
  }
  ```

### Отримати список всіх користувачів

**GET** `/users`

**Опис:**  
Повертає масив усіх користувачів (без паролів).

**Параметри запиту:**  
Відсутні.

**Відповідь**

- **200 OK:**
  ```json
  [
    {
      "_id": "664f1b...",
      "email": "user@example.com",
      "firstName": "Іван",
      "lastName": "Іванов",
      "profileImage": "https://example.com/profile.jpg",
      "role": "user"
    },
    {
      "_id": "664f1c...",
      "email": "admin@example.com",
      "firstName": "Адмін",
      "lastName": "Адмінов",
      "profileImage": "https://example.com/profile2.jpg",
      "role": "admin"
    }
  ]
  ```

### Змінити роль користувача

**PUT** `/users/role/{id}`

**Опис:**  
Оновлює роль користувача (user або admin) за його ID.

**Параметри запиту**

- `id` (String, обовʼязково): ID користувача.

**Body:**

- `role` (String, обовʼязково): Нова роль користувача. Можливі значення: `"user"` або `"admin"`.

**Відповідь**

- **200 OK:**
  ```json
  {
    "_id": "664f1b...",
    "email": "user@example.com",
    "firstName": "Іван",
    "lastName": "Іванов",
    "profileImage": "https://example.com/profile.jpg",
    "role": "admin"
  }
  ```

### Створити нову кімнату

**POST** `/rooms/create`

**Опис:**  
Створює нову кімнату в системі.

**Параметри запиту**

**Body:**

- `user_id` (String, обовʼязково): Ідентифікатор користувача, який створює кімнату.
- `name` (String, обовʼязково): Назва кімнати.
- `iotDeviceId` (String, обовʼязково): ID IoT пристрою.
- `distance` (Number, опціонально): Дистанція (наприклад, у см або м).
- `brightness` (Number, опціонально): Яскравість (від 0 до 100, за замовчуванням 100).

**Відповідь**

- **200 OK:**
  ```json
  {
    "message": "Кімната успішно створена",
    "room": {
      "_id": "6650a1...",
      "user_id": "664f1b...",
      "name": "Кімната 1",
      "iotDeviceId": "iot12345",
      "distance": 10,
      "brightness": 100
    }
  }
  ```

### Отримати інформацію про кімнату

**GET** `/rooms/info/{roomId}`

**Опис:**  
Повертає інформацію про кімнату за її ID.

**Параметри запиту**

- `roomId` (String, обовʼязково): ID кімнати.

**Відповідь**

- **200 OK:**
  ```json
  {
    "_id": "6650a1...",
    "user_id": "664f1b...",
    "name": "Кімната 1",
    "iotDeviceId": "iot12345",
    "distance": 10,
    "brightness": 100,
    "status": true
  }
  ```

### Оновити інформацію про кімнату

**PUT** `/rooms/update/{roomId}`

**Опис:**  
Оновлює дані кімнати за її ID.

**Параметри запиту**

- `roomId` (String, обовʼязково): ID кімнати.

**Body:**

- `user_id` (String, опціонально): Ідентифікатор користувача.
- `name` (String, опціонально): Нова назва кімнати.
- `iotDeviceId` (String, опціонально): Новий ID IoT пристрою.
- `distance` (Number, опціонально): Нова дистанція.
- `brightness` (Number, опціонально): Яскравість (від 0 до 100).

**Відповідь**

- **200 OK:**
  ```json
  {
    "message": "Кімната успішно оновлена",
    "room": {
      "_id": "6650a1...",
      "user_id": "664f1b...",
      "name": "Кімната 1",
      "iotDeviceId": "iot12345",
      "distance": 15,
      "brightness": 80,
      "status": true
    }
  }
  ```

### Оновити статус кімнати

**PATCH** `/rooms/updateStatus/{roomId}`

**Опис:**  
Оновлює статус кімнати (увімкнено/вимкнено світло) за її ID.

**Параметри запиту**

- `roomId` (String, обовʼязково): ID кімнати.

**Body:**

- `status` (Boolean, обовʼязково): Новий статус кімнати (`true` — увімкнено, `false` — вимкнено).

**Відповідь**

- **200 OK:**
  ```json
  {
    "message": "Статус кімнати успішно оновлено",
    "room": {
      "_id": "6650a1...",
      "user_id": "664f1b...",
      "name": "Кімната 1",
      "iotDeviceId": "iot12345",
      "distance": 10,
      "brightness": 100,
      "status": true
    }
  }
  ```

### Видалити кімнату

**DELETE** `/rooms/delete/{roomId}`

**Опис:**  
Видаляє кімнату з системи за її ID.

**Параметри запиту**

- `roomId` (String, обовʼязково): ID кімнати.

**Відповідь**

- **200 OK:**
  ```json
  {
    "message": "Кімната видалена"
  }
  ```

### Оновити дистанцію кімнати за IoT ID

**POST** `/rooms/update-distance`

**Опис:**  
Оновлює дистанцію для кімнати за ID IoT пристрою.

**Параметри запиту**

**Body:**

- `iotDeviceId` (String, обовʼязково): ID IoT пристрою.
- `distance` (Number, обовʼязково): Нова дистанція.

**Відповідь**

- **200 OK:**
  ```json
  {
    "message": "Дистанція успішно оновлена",
    "room": {
      "_id": "6650a1...",
      "user_id": "664f1b...",
      "name": "Кімната 1",
      "iotDeviceId": "iot12345",
      "distance": 20,
      "brightness": 100
    }
  }
  ```

### Отримати список всіх кімнат

**GET** `/rooms/`

**Опис:**  
Повертає масив усіх кімнат у системі.

**Параметри запиту:**  
Відсутні.

**Відповідь**

- **200 OK:**
  ```json
  [
    {
      "_id": "6650a1...",
      "user_id": "664f1b...",
      "name": "Кімната 1",
      "iotDeviceId": "iot12345",
      "distance": 10,
      "brightness": 100,
      "status": true
    },
    {
      "_id": "6650a2...",
      "user_id": "664f1c...",
      "name": "Кімната 2",
      "iotDeviceId": "iot54321",
      "distance": 15,
      "brightness": 80,
      "status": false
    }
  ]
  ```

### Оновити кімнату з логуванням змін

**PUT** `/rooms/{id}`

**Опис:**  
Оновлює дані кімнати за її ID та автоматично створює лог, якщо були зміни.

**Параметри запиту**

- `id` (String, обовʼязково): ID кімнати.

**Body:**

- `name` (String, опціонально): Нова назва кімнати.
- `iotDeviceId` (String, опціонально): Новий ID IoT пристрою.
- `distance` (Number, опціонально): Нова дистанція.
- `status` (Boolean, опціонально): Новий статус (увімкнено/вимкнено).
- `brightness` (Number, опціонально): Яскравість (від 0 до 100).

**Відповідь**

- **200 OK:**
  ```json
  {
    "room": {
      "_id": "6650a1...",
      "user_id": "664f1b...",
      "name": "Кімната 1",
      "iotDeviceId": "iot12345",
      "distance": 15,
      "brightness": 80,
      "status": true
    }
  }
  ```

### Розрахунок економії електроенергії для кімнати

**GET** `/rooms/saving/{roomId}`

**Опис:**  
Повертає відсоток економії електроенергії для всіх ламп у кімнаті.

**Параметри запиту**

- `roomId` (String, обовʼязково): ID кімнати.

**Відповідь**

- **200 OK:**
  ```json
  {
    "savingPercent": 34.5
  }
  ```

